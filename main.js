/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/codemirror.js
var require_codemirror = __commonJS({
  "lib/codemirror.js"(exports, module2) {
    module2.exports = CodeMirror;
  }
});

// mode/simple/simple.js
var require_simple = __commonJS({
  "mode/simple/simple.js"(exports, module2) {
    (function(mod) {
      if (typeof exports == "object" && typeof module2 == "object")
        mod(require_codemirror());
      else if (typeof define == "function" && define.amd)
        define(["../../lib/codemirror"], mod);
      else
        mod(CodeMirror);
    })(function(CodeMirror3) {
      "use strict";
      CodeMirror3.defineSimpleMode = function(name, states) {
        CodeMirror3.defineMode(name, function(config) {
          return CodeMirror3.simpleMode(config, states);
        });
      };
      CodeMirror3.simpleMode = function(config, states) {
        ensureState(states, "start");
        var states_ = {}, meta = states.meta || {}, hasIndentation = false;
        for (var state in states)
          if (state != meta && states.hasOwnProperty(state)) {
            var list = states_[state] = [], orig = states[state];
            for (var i = 0; i < orig.length; i++) {
              var data = orig[i];
              list.push(new Rule(data, states));
              if (data.indent || data.dedent)
                hasIndentation = true;
            }
          }
        var mode = {
          startState: function() {
            return {
              state: "start",
              pending: null,
              local: null,
              localState: null,
              indent: hasIndentation ? [] : null
            };
          },
          copyState: function(state2) {
            var s = {
              state: state2.state,
              pending: state2.pending,
              local: state2.local,
              localState: null,
              indent: state2.indent && state2.indent.slice(0)
            };
            if (state2.localState)
              s.localState = CodeMirror3.copyState(state2.local.mode, state2.localState);
            if (state2.stack)
              s.stack = state2.stack.slice(0);
            for (var pers = state2.persistentStates; pers; pers = pers.next)
              s.persistentStates = {
                mode: pers.mode,
                spec: pers.spec,
                state: pers.state == state2.localState ? s.localState : CodeMirror3.copyState(pers.mode, pers.state),
                next: s.persistentStates
              };
            return s;
          },
          token: tokenFunction(states_, config),
          innerMode: function(state2) {
            return state2.local && { mode: state2.local.mode, state: state2.localState };
          },
          indent: indentFunction(states_, meta)
        };
        if (meta) {
          for (var prop in meta)
            if (meta.hasOwnProperty(prop))
              mode[prop] = meta[prop];
        }
        return mode;
      };
      function ensureState(states, name) {
        if (!states.hasOwnProperty(name))
          throw new Error("Undefined state " + name + " in simple mode");
      }
      function toRegex(val, caret) {
        if (!val)
          return /(?:)/;
        var flags = "";
        if (val instanceof RegExp) {
          if (val.ignoreCase)
            flags = "i";
          if (val.unicode)
            flags += "u";
          val = val.source;
        } else {
          val = String(val);
        }
        return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
      }
      function asToken(val) {
        if (!val)
          return null;
        if (val.apply)
          return val;
        if (typeof val == "string")
          return val.replace(/\./g, " ");
        var result = [];
        for (var i = 0; i < val.length; i++)
          result.push(val[i] && val[i].replace(/\./g, " "));
        return result;
      }
      function Rule(data, states) {
        if (data.next || data.push)
          ensureState(states, data.next || data.push);
        this.regex = toRegex(data.regex);
        this.token = asToken(data.token);
        this.data = data;
      }
      function tokenFunction(states, config) {
        return function(stream, state) {
          if (state.pending) {
            var pend = state.pending.shift();
            if (state.pending.length == 0)
              state.pending = null;
            stream.pos += pend.text.length;
            return pend.token;
          }
          if (state.local) {
            if (state.local.end && stream.match(state.local.end)) {
              var tok = state.local.endToken || null;
              state.local = state.localState = null;
              return tok;
            } else {
              var tok = state.local.mode.token(stream, state.localState), m;
              if (state.local.endScan && (m = state.local.endScan.exec(stream.current())))
                stream.pos = stream.start + m.index;
              return tok;
            }
          }
          var curState = states[state.state];
          for (var i = 0; i < curState.length; i++) {
            var rule = curState[i];
            var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
            if (matches) {
              if (rule.data.next) {
                state.state = rule.data.next;
              } else if (rule.data.push) {
                (state.stack || (state.stack = [])).push(state.state);
                state.state = rule.data.push;
              } else if (rule.data.pop && state.stack && state.stack.length) {
                state.state = state.stack.pop();
              }
              if (rule.data.mode)
                enterLocalMode(config, state, rule.data.mode, rule.token);
              if (rule.data.indent)
                state.indent.push(stream.indentation() + config.indentUnit);
              if (rule.data.dedent)
                state.indent.pop();
              var token = rule.token;
              if (token && token.apply)
                token = token(matches);
              if (matches.length > 2 && rule.token && typeof rule.token != "string") {
                for (var j = 2; j < matches.length; j++)
                  if (matches[j])
                    (state.pending || (state.pending = [])).push({ text: matches[j], token: rule.token[j - 1] });
                stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
                return token[0];
              } else if (token && token.join) {
                return token[0];
              } else {
                return token;
              }
            }
          }
          stream.next();
          return null;
        };
      }
      function cmp(a, b) {
        if (a === b)
          return true;
        if (!a || typeof a != "object" || !b || typeof b != "object")
          return false;
        var props = 0;
        for (var prop in a)
          if (a.hasOwnProperty(prop)) {
            if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop]))
              return false;
            props++;
          }
        for (var prop in b)
          if (b.hasOwnProperty(prop))
            props--;
        return props == 0;
      }
      function enterLocalMode(config, state, spec, token) {
        var pers;
        if (spec.persistent) {
          for (var p = state.persistentStates; p && !pers; p = p.next)
            if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode)
              pers = p;
        }
        var mode = pers ? pers.mode : spec.mode || CodeMirror3.getMode(config, spec.spec);
        var lState = pers ? pers.state : CodeMirror3.startState(mode);
        if (spec.persistent && !pers)
          state.persistentStates = { mode, spec: spec.spec, state: lState, next: state.persistentStates };
        state.localState = lState;
        state.local = {
          mode,
          end: spec.end && toRegex(spec.end),
          endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),
          endToken: token && token.join ? token[token.length - 1] : token
        };
      }
      function indexOf(val, arr) {
        for (var i = 0; i < arr.length; i++)
          if (arr[i] === val)
            return true;
      }
      function indentFunction(states, meta) {
        return function(state, textAfter, line) {
          if (state.local && state.local.mode.indent)
            return state.local.mode.indent(state.localState, textAfter, line);
          if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1)
            return CodeMirror3.Pass;
          var pos = state.indent.length - 1, rules = states[state.state];
          scan:
            for (; ; ) {
              for (var i = 0; i < rules.length; i++) {
                var rule = rules[i];
                if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
                  var m = rule.regex.exec(textAfter);
                  if (m && m[0]) {
                    pos--;
                    if (rule.next || rule.push)
                      rules = states[rule.next || rule.push];
                    textAfter = textAfter.slice(m[0].length);
                    continue scan;
                  }
                }
              }
              break;
            }
          return pos < 0 ? 0 : state.indent[pos];
        };
      }
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Neorg
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_codemirror = __toESM(require_codemirror());
var import_simple = __toESM(require_simple());
var import_view = require("@codemirror/view");
var import_codemirror2 = __toESM(require_codemirror());
import_codemirror2.default.defineSimpleMode("neorg", {
  start: [
    { regex: /^\* .*$/, token: ["header-1", "header"], sol: true },
    { regex: /^\*\* .*/, token: ["header-2", "header"], sol: true },
    { regex: /^\*\*\* .*/, token: ["header-3", "header"], sol: true },
    { regex: /^\s*\~.*$/, token: ["list-item"], sol: true },
    { regex: "/(.*?)/", token: ["italic"] },
    { regex: /\*(.*?)\*/, token: ["bold"] },
    { regex: /`([^`]+)`/, token: ["inline-code"] },
    { regex: /^\s*- \( \)/, token: ["todo"], sol: true },
    { regex: /^\s*- \(x\)/, token: ["todo"], sol: true }
  ],
  env: [
    { regex: /\#\+(?:(END|end))_[a-zA-Z]*/, token: "comment", next: "start", sol: true },
    { regex: /.*/, token: "comment" }
  ]
});
var Neorg = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.neorgViewCreator = (leaf) => {
      return new NeorgView(leaf);
    };
  }
  async onload() {
    super.onload();
    console.log("Loading Neorg plugin ...");
    this.registerView("neorg", this.neorgViewCreator);
    this.registerExtensions(["norg"], "neorg");
    this.addRibbonIcon("plus", "New norg file", () => {
    });
  }
  newNeorgFile() {
    this.app.vault.create("untitled2.norg", "").then((file) => {
      var _a;
      return (_a = this.app.workspace.getMostRecentLeaf()) == null ? void 0 : _a.openFile(file);
    });
  }
  onunload() {
    console.log("Unloading Neorg plugin ...");
  }
};
var NeorgView = class extends import_obsidian.TextFileView {
  constructor(leaf) {
    super(leaf);
    this.changed = async () => {
      this.requestSave();
      this.reloadButtons();
    };
    this.getViewData = () => {
      return this.codeMirror.getValue();
    };
    this.setViewData = (data, clear) => {
      if (clear) {
        this.codeMirror.swapDoc(import_codemirror2.default.Doc(data, "neorg"));
      } else {
        this.codeMirror.setValue(data);
      }
      this.codeMirror.refresh();
      this.codeMirror.focus();
      this.reloadButtons();
    };
    this.clear = () => {
      this.codeMirror.setValue("");
      this.codeMirror.clearHistory();
    };
    this.codeMirror = (0, import_codemirror2.default)(this.extContentEl, {
      showCursorWhenSelecting: true
    });
    this.codeMirror.on("changes", this.changed);
  }
  // this.contentEl is not exposed, so cheat a bit.
  get extContentEl() {
    return this.contentEl;
  }
  // When the view is resized, refresh CodeMirror (thanks Licat!).
  onResize() {
    this.codeMirror.refresh();
    this.reloadButtons();
  }
  reloadButtons() {
    const todoElements = this.contentEl.querySelectorAll(".todo");
    todoElements.forEach((todoElement) => {
      todoElement.remove();
    });
    var rect = this.codeMirror.getWrapperElement().getBoundingClientRect();
    var topVisibleLine = this.codeMirror.lineAtHeight(rect.top, "window");
    var bottomVisibleLine = this.codeMirror.lineAtHeight(rect.bottom, "window");
    for (let i = topVisibleLine; i < bottomVisibleLine; i++) {
      let tokens = this.codeMirror.getLineTokens(i);
      for (let j = 0; j < tokens.length; j++) {
        if (tokens[j].type == "todo") {
          this.todoButton(tokens[j], i);
        }
      }
    }
  }
  todoButton(token, line) {
    let lines = this.contentEl.querySelector(".CodeMirror-lines");
    if (lines) {
      let button = lines.createEl("input");
      button.type = "checkbox";
      button.className = "todo";
      const coords = this.codeMirror.charCoords({ line, ch: token.start }, "local");
      button.style.left = coords.left.toString() + "px";
      button.style.top = coords.top.toString() + "px";
      button.checked = token.string == "- (x)";
      let cm = this.codeMirror;
      button.addEventListener("change", () => {
        const newText = button.checked ? "- (x)" : "- ( )";
        this.codeMirror.replaceRange(newText, { line, ch: token.start }, { line, ch: token.end });
      });
    }
  }
  getDisplayText() {
    if (this.file) {
      return this.file.basename;
    } else {
      return "org (No File)";
    }
  }
  canAcceptExtension(extension) {
    return extension === "norg";
  }
  getViewType() {
    return "neorg";
  }
};
//# sourceMappingURL=data:application/json;base64,
